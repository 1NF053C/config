Bootstrap: docker
From: node:18-alpine

# generates default files in host's /output dir

%environment
    # Used for user-specific data files. Intended for important, persistent data that should be preserved.
    export XDG_DATA_HOME="~/.local/share"
    
    # Used for non-essential, cached data. Can be deleted without loss of important information.
    export XDG_CACHE_HOME="~/.cache"
    
    # Used for temporary runtime files and other file objects. Cleared on reboot, not intended for persistent data.
    export XDG_RUNTIME_DIR="/run/user/$UID"

    # Used for persistent state data. Includes things like logs, history, and application state.
    export XDG_STATE_HOME="~/.local/state"

    # Used for user-specific configuration files.
    export XDG_CONFIG_HOME="~/.config"

%post
    # Install system packages
    apk add --no-cache jq

    # Create container directories
    mkdir -p /app
    mkdir -p /host_project_root/output # expects "--bind ./:/host_project_root/output" apptainer run flag

    # Change to container app dir
    cd /app

    # Create package.json
    npm init -y || (echo "Failed to initialize npm project" && exit 1)
    npm install --save-dev typescript @types/node || (echo "Failed to install dev dependencies" && exit 1)

    # Create tsconfig.json
    npx tsc --init || (echo "Failed to initialize TypeScript config" && exit 1)

    # Clean up npm cache to reduce image size
    npm cache clean --force

    echo "ls app";
    ls /app;

%environment
    export PATH="/app/node_modules/.bin:$PATH"

%runscript
    echo "Remove host output/* files and recreate folder"
    rm -rf /host_project_root/output
    mkdir -p /host_project_root/output

    echo "Ensure container app/* files are copied to host output/ dir"
    cp /app/* /host_project_root/output/

    echo "Ensure host include/* files are copied to host output/ dir"
    ls -la /host_project_root/include/
    cp /host_project_root/include/.gitignore /host_project_root/output
    cp /host_project_root/include/*.def /host_project_root/output
    cp /host_project_root/include/index.ts /host_project_root/output
    cp /host_project_root/include/README.md /host_project_root/output
    cp /host_project_root/include/build-*.sh /host_project_root/output
    chmod +x /host_project_root/output/build-*.sh
    cp /host_project_root/include/run-*.sh /host_project_root/output
    chmod +x /host_project_root/output/run-*.sh

    echo "Modify package.json"
    cd /host_project_root/output
    jq '.scripts.dev = "npm run build && npm run start"' package.json > package.tmp.json && mv package.tmp.json package.json
    jq '.scripts.build = "tsc"' package.json > package.tmp.json && mv package.tmp.json package.json
    jq '.scripts.start = "node ./.dist/index.js"' package.json > package.tmp.json && mv package.tmp.json package.json
    jq '.license |= if . == "ISC" then "" else . end' package.json > package.tmp.json && mv package.tmp.json package.json

    echo "Modify the tsconfig.json"
    tsc --showConfig --project tsconfig.json > tsconfig.tmp.json && mv tsconfig.tmp.json tsconfig.json;

    echo "Modify the new tsconfig.json using jq"
    jq '.compilerOptions.target = "ES2022"' tsconfig.json > tsconfig.tmp.json && mv tsconfig.tmp.json tsconfig.json;
    jq '.compilerOptions.outDir = "./.dist"' tsconfig.json > tsconfig.tmp.json && mv tsconfig.tmp.json tsconfig.json;

    echo "ls ${PWD}";
    ls ${PWD};

%labels
    Author 1nf053c
    Version 1.0
    Description "Container for generating default Node.js app files on a host system."

%test
    # Test to ensure the container is working correctly
    test -d /host_project_root #&& test -d /host_project_root/output
